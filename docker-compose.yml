services:
  # =======================
  # Backend (FastAPI)
  # =======================
  backend:
    build: ./alpha-backend
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      # Environment detection - will be overridden by .env file
      NODE_ENV: "${NODE_ENV:-development}"
      ENVIRONMENT: "${ENVIRONMENT:-development}"
      
      # Database connection pooling - Environment-aware
      QDRANT_MAX_CONNECTIONS: "${QDRANT_MAX_CONNECTIONS:-10}"
      QDRANT_HOST: "${QDRANT_HOST:-qdrant}"
      QDRANT_PORT: "${QDRANT_PORT:-6333}"
      
      # Rate limiting - Environment-aware
      MAX_GLOBAL_CONCURRENT: "${MAX_GLOBAL_CONCURRENT:-50}"
      CIRCUIT_BREAKER_THRESHOLD: "${CIRCUIT_BREAKER_THRESHOLD:-10}"
      CIRCUIT_BREAKER_RECOVERY_TIME: "${CIRCUIT_BREAKER_RECOVERY_TIME:-300}"
      
      # Job queue scaling - Environment-aware
      MIN_QUEUE_WORKERS: "${MIN_QUEUE_WORKERS:-2}"
      MAX_QUEUE_WORKERS: "${MAX_QUEUE_WORKERS:-20}"
      QUEUE_SIZE_THRESHOLD: "${QUEUE_SIZE_THRESHOLD:-1000}"
      
      # Memory and performance - Environment-aware
      MEMORY_THRESHOLD_MB: "${MEMORY_THRESHOLD_MB:-4096}"
      CPU_THRESHOLD_PERCENT: "${CPU_THRESHOLD_PERCENT:-90}"
      
      # Performance monitoring - Environment-aware
      ENABLE_PERFORMANCE_MONITORING: "${ENABLE_PERFORMANCE_MONITORING:-false}"
      LOG_LEVEL: "${LOG_LEVEL:-DEBUG}"
      ENABLE_REQUEST_LOGGING: "${ENABLE_REQUEST_LOGGING:-true}"
      
      # Enable local development authentication
      LOCAL_AUTH: "true"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./alpha-backend:/app
    networks:
      - cv-network
    healthcheck:
      # no curl in image; use stdlib python to check /api/health
      test: ["CMD", "python", "-c", "import urllib.request, json, sys; resp=urllib.request.urlopen('http://localhost:8000/api/health', timeout=5); data=json.loads(resp.read().decode()); sys.exit(0 if data.get('status') in ('healthy','degraded') else 1)"]
      interval: 30s
      timeout: 8s
      retries: 5
      start_period: 40s

  # =======================
  # Frontend (Next.js)
  # =======================
  frontend:
    build: ./cv-analyzer-frontend
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    environment:
      # Expose the backend URL to the browser (through nginx proxy)
      NEXT_PUBLIC_API_URL: "http://localhost:8000"
      NEXT_PUBLIC_API_BASE: "http://localhost:8000"
      BACKEND_URL: "http://backend:8000"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cv-network

  # =======================
  # Postgres
  # =======================
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cv_database
      POSTGRES_USER: cv_user
      POSTGRES_PASSWORD: cv_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - cv-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 20s

  # =======================
  # Qdrant
  # =======================
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - cv-network
    # (qdrant image doesn't ship curl/wget; rely on service_started here)

  # =======================
  # Redis Cache - Local Development
  # =======================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - cv-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      # Development Redis settings
      REDIS_MAXMEMORY: "100mb"
      REDIS_MAXMEMORY_POLICY: "allkeys-lru"

  # =======================
  # Nginx
  # =======================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    restart: unless-stopped
    networks:
      - cv-network
    environment:
      - DOMAIN=alphacv.alphadatarecruitment.ae

  # =======================
  # Certbot for Let's Encrypt
  # =======================
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
    depends_on:
      - nginx
    command: >-
      sh -c "trap exit TERM;
      while :; do
        certbot renew --webroot --webroot-path=/var/www/certbot --quiet --no-self-upgrade;
        sleep 12h & wait $${!};
      done;"

volumes:
  postgres_data:
  qdrant_data:
  redis_data:

networks:
  cv-network:
    driver: bridge
