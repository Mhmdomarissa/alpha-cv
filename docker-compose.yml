version: '3.8'

services:
  # ============================================================================
  # Backend (FastAPI) - Memory Optimized for g4dn.2xlarge
  # ============================================================================
  backend:
    build: ./alpha-backend
    ports:
      - "8000:8000"
    env_file:
      - ./.env
      - ./security_hardening.env
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      NODE_ENV: "production"
      ENVIRONMENT: "production"
      SECRET_KEY: "49X9pTJHdRQxMimtGsIHiCkhVltsw6keJbUUPRrUsu0="
      CUDA_VISIBLE_DEVICES: "0"
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
      QDRANT_MAX_CONNECTIONS: "400"
      QDRANT_POOL_SIZE: "200"
      QDRANT_TIMEOUT: "120"
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_MAXMEMORY: "12gb"
      REDIS_MAXMEMORY_POLICY: "allkeys-lru"
      MAX_GLOBAL_CONCURRENT: "3200"
      CIRCUIT_BREAKER_THRESHOLD: "400"
      CIRCUIT_BREAKER_RECOVERY_TIME: "300"
      MIN_QUEUE_WORKERS: "8"
      MAX_QUEUE_WORKERS: "16"
      QUEUE_SIZE_THRESHOLD: "10000"
      MEMORY_THRESHOLD_MB: "12288"
      CPU_THRESHOLD_PERCENT: "85"
      PYTHON_MEMORY_LIMIT: "12288"
      UVICORN_WORKERS: "8"
      # Heavy load optimizations for 20 conc
      # Heavy load optimizations for 20 concurrent users
      WORKER_CONNECTIONS: "4096"
      KEEPALIVE_TIMEOUT: "65"
      CLIENT_MAX_BODY_SIZE: "200M"
      # Advanced performance settings
      ENABLE_GPU_BATCH_PROCESSING: "true"
      GPU_BATCH_SIZE: "64"  # Increased for shared model optimization
      ENABLE_AGGRESSIVE_CACHING: "true"
      CACHE_TTL_EMBEDDINGS: "86400"
      CACHE_TTL_MATCHES: "3600"
      ASYNC_WORKER_POOL_SIZE: "24"
      ENABLE_PERFORMANCE_MONITORING: "true"
      LOG_LEVEL: "INFO"
      ENABLE_REQUEST_LOGGING: "true"
      ENABLE_GPU_MONITORING: "true"
      
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./alpha-backend:/app
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - email_data:/data
    networks:
      - cv-network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, json, sys; resp=urllib.request.urlopen('http://localhost:8000/api/health', timeout=5); data=json.loads(resp.read().decode()); sys.exit(0 if data.get('status') in ('healthy','degraded') else 1)"]
      interval: 30s
      timeout: 8s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 12G
          cpus: '3.5'
        reservations:
          memory: 6G
          cpus: '2.0'

  # ============================================================================
  # Frontend (Next.js) - Memory Optimized
  # ============================================================================
  frontend:
    build: 
      context: ./cv-analyzer-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    environment:
      NEXT_PUBLIC_API_URL: "https://alphacv.alphadatarecruitment.ae"
      NEXT_PUBLIC_API_BASE: "https://alphacv.alphadatarecruitment.ae"
      BACKEND_URL: "http://backend:8000"
      NODE_ENV: "production"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cv-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ============================================================================
  # PostgreSQL - Memory Optimized
  # ============================================================================
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cv_database
      POSTGRES_USER: cv_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Security: Create auth database
      POSTGRES_MULTIPLE_DATABASES: "auth_db"
      
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-optimized.conf:/etc/postgresql/postgresql.conf:ro
    restart: unless-stopped
    networks:
      - cv-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1.5G
          cpus: '1.0'
    command: >
      postgres
      -c shared_buffers=1GB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=256MB
      -c max_connections=100
      -c work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_wal_size=4GB
      -c min_wal_size=1GB
      -c checkpoint_timeout=15min
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c huge_pages=off
      -c min_wal_size=512MB
      -c max_wal_size=2GB

  # ============================================================================
  # Qdrant - Memory Optimized
  # ============================================================================
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./qdrant-optimized.yaml:/qdrant/config/production.yaml:ro
    restart: unless-stopped
    networks:
      - cv-network
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_REQUESTS: 2000
      QDRANT__STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS: 16
      QDRANT__SERVICE__MAX_REQUEST_SIZE_MB: 512
      QDRANT__STORAGE__WAL__WAL_CAPACITY_MB: 256
      QDRANT__STORAGE__PERFORMANCE__MAX_PAYLOAD_SIZE_MB: 128
      QDRANT__STORAGE__PERFORMANCE__MAX_VECTOR_SIZE: 4096
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_RESULTS: 10000
      QDRANT__STORAGE__PERFORMANCE__MAX_POINTS_PER_SEARCH: 10000
    deploy:
      resources:
        limits:
          memory: 10G
          cpus: '2.5'
        reservations:
          memory: 4G
          cpus: '1.5'

  # ============================================================================
  # Redis - Production caching layer
  # ============================================================================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 8gb --maxmemory-policy allkeys-lru --tcp-keepalive 60 --timeout 300 --maxclients 1000
    restart: unless-stopped
    networks:
      - cv-network
    deploy:
      resources:
        limits:
          memory: 10G
          cpus: '2.0'
        reservations:
          memory: 4G
          cpus: '1.0'

  # ============================================================================
  # Nginx - Reverse proxy with caching
  # ============================================================================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-cache:/var/cache/nginx
      - ./maintenance.html:/usr/share/nginx/html/maintenance.html:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    restart: unless-stopped
    networks:
      - cv-network
    environment:
      - DOMAIN=alphacv.alphadatarecruitment.ae
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ============================================================================
  # Prometheus - Metrics collection
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - cv-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=48h'
      - '--storage.tsdb.retention.size=512MB'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ============================================================================
  # Redis Exporter - Metrics export for Prometheus
  # ============================================================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=""
    restart: unless-stopped
    networks:
      - cv-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

# ============================================================================
# Persistent Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  nginx-cache:
    driver: local
  email_data:
    driver: local

networks:
  cv-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"